package com.example.demo.controller;

import com.example.demo.model.*;
import com.example.demo.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.Optional;

import java.util.List;

@CrossOrigin("http://localhost:3000")
@RestController
public class PostController {
    private MoviesSeriesRepository moviesSeriesRepository;
    private EpisodesRepository episodesRepository;
    private WordsOfContentRepository wordsOfContentRepository;
    private MoviesSeriesMetaRepository moviesSeriesMetaRepository;
    private SeasonsRepository seasonsRepository;

    @Autowired
    public PostController(MoviesSeriesRepository moviesSeriesRepository, EpisodesRepository episodesRepository, WordsOfContentRepository wordsOfContentRepository, MoviesSeriesMetaRepository moviesSeriesMetaRepository, SeasonsRepository seasonsRepository) {
        this.moviesSeriesRepository = moviesSeriesRepository;
        this.episodesRepository = episodesRepository;
        this.wordsOfContentRepository = wordsOfContentRepository;
        this.moviesSeriesMetaRepository = moviesSeriesMetaRepository;
        this.seasonsRepository = seasonsRepository;
    }


    @PostMapping("/moviesseries")
    public ResponseEntity<String> createSeriesWithMeta(@RequestBody MoviesSeries series) {
        // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—É –æ—Ç–¥–µ–ª—å–Ω–æ
        MoviesSeriesMeta meta = series.getMoviesSeriesMeta();
        series.setMoviesSeriesMeta(null); // –æ—Ç–∫–ª—é—á–∞–µ–º —Å–≤—è–∑—å, —á—Ç–æ–±—ã Hibernate –Ω–µ –ø—ã—Ç–∞–ª—Å—è –µ—ë —Å–∞–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä–∏–∞–ª
        MoviesSeries savedSeries = moviesSeriesRepository.save(series);

        // –ï—Å–ª–∏ –±—ã–ª–∞ –º–µ—Ç–∞ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –≤—Ä—É—á–Ω—É—é —Å–≤—è–∑—ã–≤–∞–µ–º
        if (meta != null) {
            meta.setMoviesSeriesId(savedSeries.getId());
            moviesSeriesMetaRepository.save(meta);
        }

        return ResponseEntity.status(HttpStatus.CREATED).body("OK Movieseries successfully saved");
    }

//    {
//        "name": "Back to the Future",
//            "typeOfContentId": 2,
//            "moviesSeriesMeta": {
//        "pic": "https://upload.wikimedia.org/wikipedia/en/d/d2/Back_to_the_Future.jpg",
//                "description": "Marty McFly, a 17-year-old high school student, is accidentally sent 30 years into the past in a time-traveling DeLorean invented by his close friend, the eccentric scientist Doc Brown.",
//                "rating": 8.5,
//                "emoji": "üöó‚ö°Ô∏è",
//                "release": "1985-07-03",
//                "year": 1985
//    }
//    }



    @PostMapping("/seasons")
    public ResponseEntity<String> createSeason(@RequestBody Seasons season) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Ä–∏–∞–ª —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º ID –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –µ–≥–æ typeOfContentId –∑–Ω–∞—á–µ–Ω–∏—é 1
        MoviesSeries moviesSeries = moviesSeriesRepository.findById(season.getMoviesSeriesId())
                .orElse(null);  // –ò—â–µ–º —Å–µ—Ä–∏–∞–ª –ø–æ ID

        if (moviesSeries == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("ERROR Movies series not found.");
        }

        if (!moviesSeries.getTypeOfContentId().equals(1L)) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("ERROR Movies series type is not valid.");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–∏–∞–ª–∞
        Optional<Seasons> existingSeason = seasonsRepository.findByMoviesSeriesIdAndSeasonNumber(season.getMoviesSeriesId(), season.getSeasonNumber());

        if (existingSeason.isPresent()) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("ERROR Season with this number already exists for the given movie series.");
        }

        // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–∑–æ–Ω
        season.setMoviesSeriesId(moviesSeries.getId());  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID —Å–µ—Ä–∏–∞–ª–∞ –≤ —Å–µ–∑–æ–Ω
        seasonsRepository.save(season);  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–∑–æ–Ω

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        return ResponseEntity.status(HttpStatus.CREATED).body("OK Season successfully saved.");
    }


//    {
//        "moviesSeriesId": 1,
//            "seasonNumber": 1
//    }


    @PostMapping("/episodes")
    public ResponseEntity<String> createEpisode(@RequestBody Episodes episode) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ–∑–æ–Ω —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º ID
        Seasons season = seasonsRepository.findById(episode.getSeasonsId())
                .orElse(null);  // –ò—â–µ–º —Å–µ–∑–æ–Ω –ø–æ ID

        if (season == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("ERROR Season not found.");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–∏–∞–ª, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–æ—Ç —Å–µ–∑–æ–Ω, –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π typeOfContentId
        MoviesSeries moviesSeries = moviesSeriesRepository.findById(season.getMoviesSeriesId())
                .orElse(null);  // –ò—â–µ–º —Å–µ—Ä–∏–∞–ª –ø–æ ID

        if (moviesSeries == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("ERROR Movies series not found.");
        }

        if (!moviesSeries.getTypeOfContentId().equals(1L)) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("ERROR Movies series type is not valid. Expected typeId: 1.");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç–ø–∏–∑–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ
        Optional<Episodes> existingEpisode = episodesRepository.findBySeasonsIdAndEpisodeNumber(episode.getSeasonsId(), episode.getEpisodeNumber());

        if (existingEpisode.isPresent()) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("ERROR Episode with this number already exists in the given season.");
        }

        // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —ç–ø–∏–∑–æ–¥
        episodesRepository.save(episode);  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —ç–ø–∏–∑–æ–¥

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        return ResponseEntity.status(HttpStatus.CREATED).body("OK Episode successfully saved.");
    }







}
